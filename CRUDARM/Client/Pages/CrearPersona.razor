@page "/CrearPersona"
@inject NavigationManager navmanager
@inject IJSRuntime js
@inject IManager manager
<button type="button" class="btn btn-outline-dark" @onclick="@(() => navmanager.NavigateTo("/"))">Regresar</button>
<EditForm Model="ProcesoPersona" OnValidSubmit="CrearActualizarPersona">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" @bind-value="@ProcesoPersona.nombre" />
                <label>Nombre</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.nombre)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" @bind-value="@ProcesoPersona.apellidoP" />
                <label>Apellido Paterno</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.apellidoP)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" @bind-value="@ProcesoPersona.apellidoM" />
                <label>Apellido Materno</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.apellidoM)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>Sexo</label>
            <select class="custom-select" @bind="@ProcesoPersona.sexo" style="width:100%">
                <option disabled selected value="">Selecciona Sexo</option>
                <option value="Masulino">Masculino</option>
                <option value="Femenino">Femenino</option>
            </select>
            <ValidationMessage For="@(() => ProcesoPersona.sexo)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="date" min="@fechamindate" max="@fechamaxdate" @onchange="Formatearfechas" />
                <label>Fecha de Nacimiento</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.fechanacimiento)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" maxlength="18" @bind-value="@ProcesoPersona.curp" />
                <label>Curp</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.curp)" />
            <label style="@(invalidCurp ? "color:red" :  "display: none")">• No coincide la curp con su fecha de nacimiento</label>
        </div>
    </div>
    <br />
    <h1>Ubicación</h1>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" @bind-value="@ProcesoPersona.direccion" />
                <label>Domicilio</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.direccion)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" @bind-value="@ProcesoPersona.ninterno" />
                <label>Numero Interior</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.ninterno)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" @bind-value="@ProcesoPersona.nexterno" />
                <label>Numero Exterior</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.nexterno)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-container">
                <input type="text" @bind-value="@ProcesoPersona.colonia" />
                <label>Colonia</label>
            </div>
            <ValidationMessage For="@(() => ProcesoPersona.colonia)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>Selecciona País</label>
            <select class="custom-select" style="max-width:150px;" @onchange="AsignarPais" required>
                <option disabled selected value="">Categoria</option>
                @if (ListaPaises.Count != 0)
                {
                    @foreach (var pais in ListaPaises)
                    {
                        <option value="@pais.PaisId">@pais.Nombre</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => ProcesoPersona.pais)" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>Estado</label>
            <select class="custom-select" style="max-width:150px;" @onchange="AsignarEstado">
                <option disabled selected value="">Categoria</option>
                @foreach (var estado in ListaEstados)
                {
                    <option value="@estado.EstadoId">@estado.Nombre</option>
                }
            </select>
            <ValidationMessage For="@(() => ProcesoPersona.estado)" />
        </div>
    </div>
    <br />
    <h1>Contacto</h1>
    <div class="form-group">
        <div class="form-group">
            <button type="button" class="btn-secondary"
                    @onclick="@(()=> ProcesoPersona.ListaContactos.Add(new ContactoDTO()))">
                Agregar Contacto
            </button>
        </div>
        @for (int i = 0; i < ProcesoPersona.ListaContactos.Count; i++)
        {
            var indice = i;
            var contacto = ProcesoPersona.ListaContactos[i];
            <div class="row">
                <div class="col">
                    <div class="input-container">
                        <input type="text" maxlength="10" @bind-value="@contacto.Telefono" />
                        <label>Telefono</label>
                    </div>
                    <ValidationMessage For="@(() => contacto.Telefono)" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <select class="custom-select" style="max-width:150px;" @bind="@contacto.Tipo">
                        <option disabled selected value="">Tipo</option>
                        <option value="Sin etiqueta">Sin etiqueta</option>
                        <option value="Móvil">Móvil</option>
                        <option value="Trabajo">Trabajo</option>
                        <option value="Casa">Casa</option>
                        <option value="Principal">Principal</option>
                    </select>
                    <ValidationMessage For="@(() => contacto.Tipo)" />
                </div>
            </div>
            if (indice > 1)
            {
                <button type="button" class="btn btn-danger" @onclick="@(()=>ProcesoPersona.ListaContactos.RemoveAt(indice))">Remover</button>
            }
        }
    </div>
    <h1>Historial Laboral</h1>
    <div class="form-group">
        @for (int i = 0; i < ProcesoPersona.ListHistoriaLab.Count; i++)
        {
            var indice = i;
            var historial = ProcesoPersona.ListHistoriaLab[i];
            <div class="row">
                <div class="col">
                    <div class="input-container">
                        <input type="text" @bind-value="@historial.DTrabajo" />
                        <label>Donde Trabajo</label>
                    </div>
                    <ValidationMessage For="@(() => historial.DTrabajo)" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>Fecha de Inicio</label>
                    <input type="date" id="fechaInicio" min="@fechaminfechainicio" max="@fechaActual" @onchange="@(e => Formatearfinalizacionfechas(e, historial))" />
                    <ValidationMessage For="@(() => historial.FechaInicio)" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>Fecha de Finalización</label>
                    <input type="date" min="@historial.FechaminFechafinal" max="@fechaActual" @bind-value="@historial.FechaFinal" />
                    <ValidationMessage For="@(() => historial.FechaFinal)" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>Descripción de Actividades</label>
                    <textarea class="estilotextarea2" cols="60" rows="8" @bind="@historial.DescAct" />
                    <ValidationMessage For="@(() => historial.DescAct)" />
                </div>
            </div>
        }
    </div>
    @if (flagProcesoPersona)
    {
        <div style="display: flex; justify-content: center;">
            <div>
                <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Small" />
            </div>
        </div>
    }
    else
    {
        <div class="float-right">
            <MatButton Type="submit" Disabled="flagProcesoPersona" Raised="true">Registrar</MatButton>
        </div>
    }
</EditForm>
@code{
    protected PersonaDTO ProcesoPersona { get; set; } = new PersonaDTO();
    protected ContactoDTO contactoDTO { get; set; } = new ContactoDTO();
    protected List<Tbl_Pais> ListaPaises { get; set; } = new List<Tbl_Pais>();

    protected List<Tbl_Estados> ListaEstados { get; set; } = new List<Tbl_Estados>();
    #region variable
    protected string fechaActual { get; set; }
    protected bool flagProcesoPersona { get; set; }
    protected bool invalidCurp { get; set; }
    protected string mensajeError { get; set; }
    protected string fechamaxdate { get; set; }
    protected string fechamindate { get; set; }
    protected string fechaminfechainicio { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < 3; i++)
        {
            if (i < 2)
            {
                ProcesoPersona.ListaContactos.Add(new ContactoDTO());
            }
            if (i < 3)
            {
                ProcesoPersona.ListHistoriaLab.Add(new Tbl_HistoriaLab_DTO());
            }
        }
        fechaActual = DateTime.Now.ToString("yyyy-MM-dd");
        fechamaxdate = (DateTime.Now.AddYears(-1)).ToString("yyyy-MM-dd");
        fechamindate = (DateTime.Now.AddYears(-100)).ToString("yyyy-MM-dd");
        ProcesoPersona.fechanacimiento = null;
        await ObtenerPaises();

    }

    #region Obtener
    private async Task ObtenerPaises()
    {
        try
        {
            var respuesta = await manager.Get<List<Tbl_Pais>>($"api/Externos/ObtenerPaises");
            if (respuesta.Estado == EstadosDeRespuesta.Correcto)
            {
                ListaPaises = respuesta.Datos;
            }
            else
            {
                mensajeError = respuesta.Estatus.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = ex.ToString();
        }
    }

    private async Task ObtenerEstados(long PaisId)
    {
        try
        {
            var respuesta = await manager.Get<Tbl_ConsultaDTO>($"api/Externos/ObtenerEstadosporPais/{PaisId}");
            if (respuesta.Estado == EstadosDeRespuesta.Correcto)
            {
                ListaEstados = respuesta.Datos.estados;
                StateHasChanged();
            }
            else
            {
                mensajeError = respuesta.Estatus.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = ex.ToString();
        }
    }
    #endregion

    #region void
    private async void AsignarPais(ChangeEventArgs e)
    {
        long PaisId = Convert.ToInt64(e.Value.ToString());
        ProcesoPersona.pais = PaisId;
        await ObtenerEstados(PaisId);
    }

    private async void AsignarEstado(ChangeEventArgs e)
    {
        long EstadoId = Convert.ToInt64(e.Value.ToString());
        ProcesoPersona.estado = EstadoId;
    }

    private void Formatearfechas(ChangeEventArgs args)
    {
        var value = args.Value.ToString();
        DateTime tempday = value == string.Empty ? DateTime.Today : DateTime.Parse(value);
        ProcesoPersona.fechanacimiento = tempday;
        foreach (var historia in ProcesoPersona.ListHistoriaLab)
        {
            historia.FechaInicio = null;
            historia.FechaFinal = null;
        }
        fechaminfechainicio = tempday.AddYears(14).ToString("yyyy-MM-dd");
    }

    private void Formatearfinalizacionfechas(ChangeEventArgs args, Tbl_HistoriaLab_DTO historial)
    {
        var value = args.Value.ToString();
        historial.FechaInicio = value == string.Empty ? DateTime.Today : DateTime.Parse(value);
        historial.FechaminFechafinal = historial.FechaInicio.Value.ToString("yyyy-MM-dd");
        StateHasChanged();
    }
    #endregion

    #region MetodosCrear

    private bool Condicioncurp()
    {
        invalidCurp = false;
        bool respuesta = false;
        var iniciofecha = ProcesoPersona.curp.Substring(4, 6);
        var año = iniciofecha.Substring(0, 2);
        var mes = iniciofecha.Substring(2, 2);
        var dia = iniciofecha.Substring(4, 2);
        string[] fechanacimiento = ProcesoPersona.fechanacimiento.Value.ToString("yyyy/MM/dd").Split('/', ' ');
        //string[] fechanacimiento = fechanacimientostring.Split('/', ' ');
        var añocompletonacimiento = fechanacimiento[0];
        var añonacimiento = añocompletonacimiento.Substring(2, 2);
        var mesnacimiento = fechanacimiento[1];
        var dianacimiento = fechanacimiento[2];
        if (añonacimiento.Equals(año) && mesnacimiento.Equals(mes) && dianacimiento.Equals(dia))
        {
            respuesta = true;
        }
        return respuesta;
    }

    private async Task CrearActualizarPersona()
    {
        var respuestacurp = Condicioncurp();
        if (!respuestacurp)
        {
            invalidCurp = true;
        }
        else
        {
            try
            {
                var respuesta = await manager.Post<PersonaDTO, PersonaDTO>($"api/Persona/CrearActualizarPersona", ProcesoPersona);
                if (respuesta.Estado == EstadosDeRespuesta.Correcto)
                {
                    await js.InvokeVoidAsync("Swal.fire", "success", respuesta.Estatus.Mensaje, "Exitoso");
                    navmanager.NavigateTo("/");
                }
                else
                {
                    mensajeError = respuesta.Estatus.Mensaje;
                }
            }
            catch (Exception ex)
            {
                mensajeError = ex.ToString();
            }
        }
    }
    #endregion
}