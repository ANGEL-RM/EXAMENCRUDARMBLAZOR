// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CRUDARM.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using CRUDARM.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using CRUDARM.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using CRUDARM.Client.Administracion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using CRUDARM.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using CRUDARM.Shared.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using CRUDARM.Shared.Externos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\_Imports.razor"
using CRUDARM.Shared.Persona;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/CrearPersona")]
    public partial class CrearPersona : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 226 "Z:\VisualStudioProyectoLocal\CRUDARM\CRUDARM\Client\Pages\CrearPersona.razor"
      
    protected PersonaDTO ProcesoPersona { get; set; } = new PersonaDTO();
    protected ContactoDTO contactoDTO { get; set; } = new ContactoDTO();
    protected List<Tbl_Pais> ListaPaises { get; set; } = new List<Tbl_Pais>();

    protected List<Tbl_Estados> ListaEstados { get; set; } = new List<Tbl_Estados>();
    #region variable
    protected string fechaActual { get; set; }
    protected bool flagProcesoPersona { get; set; }
    protected bool invalidCurp { get; set; }
    protected string mensajeError { get; set; }
    protected string fechamaxdate { get; set; }
    protected string fechamindate { get; set; }
    protected string fechaminfechainicio { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < 3; i++)
        {
            if (i < 2)
            {
                ProcesoPersona.ListaContactos.Add(new ContactoDTO());
            }
            if (i < 3)
            {
                ProcesoPersona.ListHistoriaLab.Add(new Tbl_HistoriaLab_DTO());
            }
        }
        fechaActual = DateTime.Now.ToString("yyyy-MM-dd");
        fechamaxdate = (DateTime.Now.AddYears(-1)).ToString("yyyy-MM-dd");
        fechamindate = (DateTime.Now.AddYears(-100)).ToString("yyyy-MM-dd");
        ProcesoPersona.fechanacimiento = null;
        await ObtenerPaises();

    }

    #region Obtener
    private async Task ObtenerPaises()
    {
        try
        {
            var respuesta = await manager.Get<List<Tbl_Pais>>($"api/Externos/ObtenerPaises");
            if (respuesta.Estado == EstadosDeRespuesta.Correcto)
            {
                ListaPaises = respuesta.Datos;
            }
            else
            {
                mensajeError = respuesta.Estatus.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = ex.ToString();
        }
    }

    private async Task ObtenerEstados(long PaisId)
    {
        try
        {
            var respuesta = await manager.Get<Tbl_ConsultaDTO>($"api/Externos/ObtenerEstadosporPais/{PaisId}");
            if (respuesta.Estado == EstadosDeRespuesta.Correcto)
            {
                ListaEstados = respuesta.Datos.estados;
                StateHasChanged();
            }
            else
            {
                mensajeError = respuesta.Estatus.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = ex.ToString();
        }
    }
    #endregion

    #region void
    private async void AsignarPais(ChangeEventArgs e)
    {
        long PaisId = Convert.ToInt64(e.Value.ToString());
        ProcesoPersona.pais = PaisId;
        await ObtenerEstados(PaisId);
    }

    private async void AsignarEstado(ChangeEventArgs e)
    {
        long EstadoId = Convert.ToInt64(e.Value.ToString());
        ProcesoPersona.estado = EstadoId;
    }

    private void Formatearfechas(ChangeEventArgs args)
    {
        var value = args.Value.ToString();
        DateTime tempday = value == string.Empty ? DateTime.Today : DateTime.Parse(value);
        ProcesoPersona.fechanacimiento = tempday;
        foreach (var historia in ProcesoPersona.ListHistoriaLab)
        {
            historia.FechaInicio = null;
            historia.FechaFinal = null;
        }
        fechaminfechainicio = tempday.AddYears(14).ToString("yyyy-MM-dd");
    }

    private void Formatearfinalizacionfechas(ChangeEventArgs args, Tbl_HistoriaLab_DTO historial)
    {
        var value = args.Value.ToString();
        historial.FechaInicio = value == string.Empty ? DateTime.Today : DateTime.Parse(value);
        historial.FechaminFechafinal = historial.FechaInicio.Value.ToString("yyyy-MM-dd");
        StateHasChanged();
    }
    #endregion

    #region MetodosCrear

    private bool Condicioncurp()
    {
        invalidCurp = false;
        bool respuesta = false;
        var iniciofecha = ProcesoPersona.curp.Substring(4, 6);
        var año = iniciofecha.Substring(0, 2);
        var mes = iniciofecha.Substring(2, 2);
        var dia = iniciofecha.Substring(4, 2);
        string[] fechanacimiento = ProcesoPersona.fechanacimiento.Value.ToString("yyyy/MM/dd").Split('/', ' ');
        //string[] fechanacimiento = fechanacimientostring.Split('/', ' ');
        var añocompletonacimiento = fechanacimiento[0];
        var añonacimiento = añocompletonacimiento.Substring(2, 2);
        var mesnacimiento = fechanacimiento[1];
        var dianacimiento = fechanacimiento[2];
        if (añonacimiento.Equals(año) && mesnacimiento.Equals(mes) && dianacimiento.Equals(dia))
        {
            respuesta = true;
        }
        return respuesta;
    }

    private async Task CrearActualizarPersona()
    {
        var respuestacurp = Condicioncurp();
        if (!respuestacurp)
        {
            invalidCurp = true;
        }
        else
        {
            try
            {
                var respuesta = await manager.Post<PersonaDTO, PersonaDTO>($"api/Persona/CrearActualizarPersona", ProcesoPersona);
                if (respuesta.Estado == EstadosDeRespuesta.Correcto)
                {
                    await js.InvokeVoidAsync("Swal.fire", "success", respuesta.Estatus.Mensaje, "Exitoso");
                    navmanager.NavigateTo("/");
                }
                else
                {
                    mensajeError = respuesta.Estatus.Mensaje;
                }
            }
            catch (Exception ex)
            {
                mensajeError = ex.ToString();
            }
        }
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IManager manager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navmanager { get; set; }
    }
}
#pragma warning restore 1591
